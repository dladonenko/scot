<?php


/**
 * Skeleton subclass for representing a row from the 'content' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 04/13/11 17:59:53
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Content extends BaseContent {

	/**
	 * Initializes internal state of Content object.
	 * @see        parent::__construct()
	 */
	public function __construct()
	{
		// Make sure that parent constructor is always invoked, since that
		// is where any default values for this object are set.
		parent::__construct();
	}

	public function getCryptedText(User $user) {
		$encryptor=new EncryptorAES();
		$encryptor->setSecretKey($user->getSecretKey());
		$text=$this->getText();
        $encryptor->encrypt($text);
        return $text;
	}

	public function getPlainText() {
		return $this->getText();
	}

	public function preInsert(PropelPDO $con = null) {

		$sequence=new ContentSequence();
		$sequence->setType(ContentSequence::CONTENT_TYPE_BASE);
		$sequence->save();

		$this->setId($sequence->getId());
		$this->setVersion(1);
		return true;

	}

	/*
	public function preUpdate(PropelPDO $con = null) {
		$this->setVersion($this->getVersion()+1);
		return true;

	}
	*/

	public function postInsert(PropelPDO $con = null) {
        if($this->getIsFree()) {
        	ConfigPeer::updateFreeGeneralVersion();
        }
	}

	public function postUpdate(PropelPDO $con = null) {
        if($this->getIsFree()) {
        	ConfigPeer::updateFreeGeneralVersion();
        }
	}

	public function postDelete(PropelPDO $con = null) {
        if($this->getIsFree()) {
        	ConfigPeer::updateFreeGeneralVersion();
        }
	}

	public static function getImportBaseDirPath() {
	    return sfConfig::get('sf_upload_dir').sfConfig::get('app_content_import_path');

	}

	public function getAttachmentsFiles($culture, $defaultCulture = null, $method='getFilename') {

		//var_dump($defaultCulture);

		$files=array();
		$attachments=$this->getContentAttachments();
		$this->clearContentAttachments();
		foreach($attachments as $attachment) {
			$filename=$attachment->$method($culture);
			if(!$filename && $defaultCulture) $filename=$attachment->$method($defaultCulture);

			if($filename) $files[$attachment->getId()]=$filename;
		}
		return $files;

	}

	public function createImportDir() {
		$basePath=self::getImportBaseDirPath();
		$ownDirName=time().rand(1000, 9999);
		mkdir($basePath.$ownDirName);
		return $basePath.$ownDirName.'/';

	}

	public function import($baseFile, $attachmentsFiles, $contentEncoding='UTF-8') {

		$baseFileName=basename($baseFile);
		$tmp=explode('.', $baseFileName);
		$contentName=$tmp[0];

        $this->setName($contentName);

        $text=file_get_contents($baseFile);
        if($contentEncoding!='UTF-8') {
        	$text=iconv($contentEncoding, 'UTF-8', $text);
        }

		$this->setText($text);

		if(!$this->isNew()) {
			$attachments=$this->getContentAttachments();
			$this->clearContentAttachments();
			foreach($attachments as $attachment) {
				$attachment->setCulture($this->getCulture());
				$i18n = $attachment->getCurrentContentAttachmentI18n();
				if(!$i18n->isNew()) $i18n->delete();
			}
		}

		foreach($attachmentsFiles as $attachmentFile) {
            $attachment=new ContentAttachment();
            $attachment->setCulture($this->getCulture());
            $attachment->setFilename(basename($attachmentFile));
            $attachment->setSource($attachmentFile);
            $this->addContentAttachment($attachment);
        }

    }

} // Content
